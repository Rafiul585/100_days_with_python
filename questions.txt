# list = [0, 1, 4, 'apple', 9, 16, 25, 'apple', 36, 81, 49, 'banana', 36, 49, 64]


''' Q: 1 - You have to find 49 from this list. If 49 exists on the list, then count the number.
Example: [0, 1, 4, 'apple', 9, 16, 25, 'apple', 36, 81, 49, 'banana', 36, 49, 64]
Expected output: 2 '''
# count = 0
# for l in list:
#     if l == 49:
#         count += 1
# print(count)


''' Q: 2 - find the second largest number of the given list.
Example: [0, 1, 4, 'apple', 9, 16, 25, 'apple', 36, 81, 49, 'banana', 36, 49, 64]
Expected output: 64 '''

# max_value = list[0]
# seocnd_large_number = []
# for l in list:
#     if type(l) != str and l >= max_value:
#         seocnd_large_number.append(l)

# seocnd_large_number_sorted  = sorted(seocnd_large_number)
# print(seocnd_large_number_sorted[-2])


''' Q: 3 - Remove apple from the list
Example: [0, 1, 4, 'apple', 9, 16, 25, 'apple', 36, 81, 49, 'banana', 36, 49, 64]
Expected output: [0, 1, 4, 9, 16, 25, 36, 81, 49, 'banana', 36, 49, 64] '''

# for l in list:
#     if l == 'apple':
#         list.remove('apple')
# print(list)



''' Q: 4 - convert list to list of dictionaries from those given lists.
Example: ["Black", "Red", "Maroon", "Yellow"], ["#000000", "#FF0000", "#800000", "#FFFF00"]
Expected Output: [
    {'color_name': 'Black', 'color_code': '#000000'},
    {'color_name': 'Red', 'color_code': '#FF0000'},
    {'color_name': 'Maroon', 'color_code': '#800000'},
    {'color_name': 'Yellow', 'color_code': '#FFFF00'}
    ] '''

# color_names_lists = ["Black", "Red", "Maroon", "Yellow"]
# color_code_list = ["#000000", "#FF0000", "#800000", "#FFFF00"]

# expected_output = []
# for x, y in zip(color_names_lists, color_code_list):
#     creating_dict = {'color_name': x, 'color_code': y}
#     expected_output.append(creating_dict)
# print(expected_output)


''' Q: 5 - Take key and value input from user, and add this key and value to a dictionary.
Sample Dictionary : {0: 10, 1: 20}
after that if the value is even then make it odd or if the value is odd then print the value as like as 
Expected Output:{0: 10, 1: 20, 3: 31} '''


# key = int(input('Enter a key name: '))
# value = input('Enter a value: ')

# dict = {0: 10, 1: 20}
# dict[key]=value
# convert_value_type = int(dict[key])
# if convert_value_type % 2 == 0:
#     dict[key] = convert_value_type + 1
# print(dict)


''' Q: 6 - Create a class name, Teacher. Teacher have some properties name, designation, 
month salary, and department. In every year he will get 20% increment. 
After five year how much salary he will get at the end of the year. 
Expected Output: ahter_five years 298598.4 if he gets 10000 tk per month'''


# class Teacher():

#     def __init__(self, teacher_name, teacher_designation, monthly_salary, department):

#         self.monthly_salary = monthly_salary

#         print(f"""Hi I'm {teacher_name}. My designation is {teacher_designation} and {department} is my department.
#         I get {monthly_salary} tk salary at a month. """)

#     def getIncrement(self, increment):

#         return increment

#     def getSalaryEndOfTheYear(self, how_much_year, increments):

#         TOTAL_MONTH_IN_A_YEAR = 12

#         total_salary_after_the_end_of_a_yr = (
#             TOTAL_MONTH_IN_A_YEAR*self.monthly_salary)

#         total_salary_after_the_end_ofa_yr_wth_icrement = (
#             total_salary_after_the_end_of_a_yr * increments/100) + total_salary_after_the_end_of_a_yr
#         print(total_salary_after_the_end_ofa_yr_wth_icrement)
#         yr = range(how_much_year)
#         for y in yr:
#             total_salary_after_the_end_ofa_yr_wth_icrement = (
#                 total_salary_after_the_end_ofa_yr_wth_icrement*increments/100)+total_salary_after_the_end_ofa_yr_wth_icrement

#         print('ahter_five years', total_salary_after_the_end_ofa_yr_wth_icrement)


# # Creating objects
# teachers_name = input('Teacher name: ')
# teacher_designation = input('Designation: ')
# monthly_salary = int(input('Monthly salary: '))
# department = input('Ddepartment: ')

# teacher = Teacher(teachers_name, teacher_designation,
#                   monthly_salary, department)


# how_much_increment_get_after_a_yr = int(
#     input('How much increments he will get after the end of the year, Ex: 20%: '))
# increment_persentage = teacher.getIncrement(how_much_increment_get_after_a_yr)


# how_much_year = input('Years: ')
# teacher.getSalaryEndOfTheYear(how_much_year, increment_persentage)
